from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.filters import Command
from keyboards import create_inline_keyboard
from aiogram.fsm.context import FSMContext
from states import BroadcastState
from services import get_all_users, set_user_active_status, get_stat
from logging import log, ERROR
from config import ADMIN_ID

admin_router = Router()

@admin_router.message(Command("admin"))
async def cmd_admin(message: Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer(
            text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:",
            parse_mode="HTML",
            reply_markup=await create_inline_keyboard(
                ["üöÄ–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", "üìä–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"],
                ["send_broadcast_message", "get_stat"]
            )
        )

@admin_router.callback_query(F.data == "admin_menu")
async def cmd_admin(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.answer()
    await callback.message.delete()

    if callback.from_user.id == ADMIN_ID:
        await callback.message.answer(
            text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:",
            parse_mode="HTML",
            reply_markup=await create_inline_keyboard(
                ["üöÄ–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", "üìä–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"],
                ["send_broadcast_message", "get_stat"]
            )
        )

@admin_router.callback_query(F.data == "get_stat")
async def send_stat_handler(callback: CallbackQuery):
    await callback.answer()
    await callback.message.delete()

    if callback.from_user.id == ADMIN_ID:
        stat_data = await get_stat()

        message_text = (
            f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n"
            f"–ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{stat_data.get('users_count')}</b>\n"
            f"–ö–æ–ª-–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{stat_data.get('active_users_count')}</b>\n"
            f"–ö–æ–ª-–≤–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{stat_data.get('no_active_users_count')}</b>\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å —Å—Ç–∞—Ä—Ç–æ–≤—ã–º –ø—Ä–æ–º–æ–∫–æ–¥–æ–º: <b>{stat_data.get('count_users_start_promotion')}</b>"
        )

        await callback.message.answer(
            text=message_text,
            parse_mode="HTML",
            reply_markup=await create_inline_keyboard(
                ["‚¨ÖÔ∏è–ù–∞–∑–∞–¥"],
                ["admin_menu"]
            )
        )

@admin_router.callback_query(F.data == "send_broadcast_message")
async def send_broadcast_message_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.delete()

    msg = await callback.message.answer(
        text="–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.",
        parse_mode="HTML",
        reply_markup=await create_inline_keyboard(
            ["‚¨ÖÔ∏è–ù–∞–∑–∞–¥"],
            ["admin_menu"]
        )
    )

    await state.set_state(BroadcastState.broadcast_message)
    await state.update_data(last_message_id=msg.message_id)

@admin_router.message(BroadcastState.broadcast_message)
async def send_broadcast_message_handler(message: Message, state: FSMContext):
    state_data = await state.get_data()
    last_message_id = state_data.get("last_message_id")

    await message.bot.delete_message(message.chat.id, last_message_id)

    if message.text:
        text_data = message.text
    else:
        text_data = message.caption

    photo = message.photo[-1] if message.photo else None
    video = message.video if message.video else None

    await state.update_data(text_data=text_data, photo=photo, video=video)

    if photo:
        await message.answer_photo(
            photo=photo.file_id,
            caption=text_data,
            parse_mode="HTML",
            reply_markup=await create_inline_keyboard(
                ["üöÄ–û—Ç–ø—Ä–∞–≤–∏—Ç—å", "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å"],
                ["send_broadcast_confirm", "admin_menu"]
            )
        )
    elif video:
        await message.answer_video(
            video=video.file_id,
            caption=text_data,
            parse_mode="HTML",
            reply_markup=await create_inline_keyboard(
                ["üöÄ–û—Ç–ø—Ä–∞–≤–∏—Ç—å", "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å"],
                ["send_broadcast_confirm", "admin_menu"]
            )
        )
    else:
        await message.answer(
            text=text_data,
            parse_mode="HTML",
            reply_markup=await create_inline_keyboard(
                ["üöÄ–û—Ç–ø—Ä–∞–≤–∏—Ç—å", "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å"],
                ["send_broadcast_confirm", "admin_menu"]
            )
        )

    await state.set_state(BroadcastState.confirm_message)

@admin_router.callback_query(F.data == "send_broadcast_confirm", BroadcastState.confirm_message)
async def send_broadcast_confirm_message(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
        await callback.message.delete()

        message_data = await state.get_data()
        text_data = message_data.get("text_data")
        photo = message_data.get("photo")
        video = message_data.get("video")

        users = await get_all_users()
        if not users:
            await callback.message.answer("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
            await state.clear()
            return

        total_users = len(users)
        success_count = 0
        failed_count = 0

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        progress_msg = await callback.message.answer(
            f"üîÑ –ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏...\n"
            f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: 0\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: 0"
        )

        for i, user in enumerate(users, 1):
            try:
                if photo:
                    await callback.bot.send_photo(
                        user[0], 
                        photo.file_id, 
                        caption=text_data, 
                        parse_mode="HTML"
                    )
                elif video:
                    await callback.bot.send_video(
                        user[0], 
                        video.file_id, 
                        caption=text_data, 
                        parse_mode="HTML"
                    )
                else:
                    await callback.bot.send_message(
                        user[0], 
                        text_data, 
                        parse_mode="HTML"
                    )
                success_count += 1
                await set_user_active_status(user[0], True)
            except Exception as e:
                failed_count += 1
                await set_user_active_status(user[0], False)
                log(level=ERROR, msg=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[0]}: {e}")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∫–∞–∂–¥—ã–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if i % 10 == 0 or i == total_users:
                try:
                    await progress_msg.edit_text(
                        f"üîÑ –†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...\n"
                        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                        f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed_count}\n"
                        f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{total_users} ({int(i/total_users*100)}%)"
                    )
                except Exception as e:
                    log(level=ERROR, msg=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        await progress_msg.edit_text(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
            f"‚Ä¢ –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed_count}\n\n"
            f"–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
            reply_markup=await create_inline_keyboard(
                ["‚¨ÖÔ∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"],
                ["admin_menu"]
            )
        )

        await state.clear()

    except Exception as e:
        log(level=ERROR, msg=f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")
        await callback.message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {str(e)}\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
        )
        await state.clear() 